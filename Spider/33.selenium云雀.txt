语雀笔记：

------------------------------------------------------------------------------------------------------
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.support.wait import WebDriverWait


    # 定义浏览器
    try:
        browser = webdriver.Chrome(executable_path='chromedriver.exe')
        browser.get('https://www.baidu.com')
        input = browser.find_element_by_id('kw')
        input.send_keys('小姐姐')
        input.send_keys(Keys.ENTER)  # 键盘方式
        wait = WebDriverWait(browser, 10)  # 显示等待
        wait.until(EC.presence_of_element_located((By.ID, 'content_left')))
        print(browser.current_url)
        print(browser.get_cookies())  # cookies
        # print(browser.page_source) # 源代码
    finally:
        browser.close()
    ------------------------------------------------------------------------------------------------------
    支持 Chrome Firefox Edge safari浏览器 -->初始化
    browser.page_source # 源代码

    # 查找定位:
    # 单个节点 find_element
    input_first = browser.find_element_by_id('q') # id
    input_first = browser.find_element(By.id,"q") # id
    input_second = browser.find_element_by_css_selector('#q') # css选择器
    input_third = browser.find_element_by_xpath('//*[@id="q"]') # xpath

    # 多个节点:
    find_elements -->列表
    input_list = browser.find_elements(By.CSS_SELECTOR,".service-bd li") # id

    dom操作:
    send_keys # 输入文字
    clear()  # 清空
    click() # 鼠标点击

    #动作链
    from selenium.webdriver import ActionChains # 导包

    browser.switch_to.frame('iframeResult')
    source = browser.find_element_by_css_selector('#draggable')
    target = browser.find_element_by_css_selector('#droppable')
    actions = ActionChains(browser)
    actions.drag_and_drop(source, target)
    actions.perform() # 执行

    # 执行JavaScript
    browser.execute_script('window.scrollTo(0,document.body.scrollHeight)')
    browser.execute_script('alert("To Bottom")')

    # 获取节点信息
    page_source 源代码
    get_attribute('src')
    logo = browser.find_element_by_class_name('logo-image')
    print(logo.get_attribute('src'))
    text #文本属性
    --------------------------------------------------------
    # 切换Frame
    switch_to.frame("")

    # 延时等待
    browser.implicitly_wait() # 隐式等待
    wait = WebDriverWait(browser, 10)  # 显示等待

    # 前进后退
    browser.back() # 后退
    browser.forward() # 前进

    # 操作选项卡
    browser.window_handles # 所有选项卡
    browser.switch_to_window(browser.window_handles[-1]) # 切换选项卡

    # 异常处理
    from selenium.common.exceptions import TimeoutException, NoSuchElementException
    try:
        pass
    except TimeoutException:
        print('Time out !!!')
    try:
        pass
    except NoSuchElementException:
        print('No Eleement')
    finaly:
        broswer.close()

    # selenium检测 CDP-->Google 的Chrome Devtools-Protocol 来解决这个问题
    options = webdriver.ChromeOptions()
    options.add_argument('ignore-certificate-errors') # 测试selenium,显示不信任网站
    ------------------------------------------------------------------------------
    #登录被检测
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    driver = webdriver.Chrome(options=options, executable_path='chromedriver.exe')
    driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
        "source": """
        Object.defineProperty(navigator, 'webdriver', {
          get: () => undefined
        })
      """
    })
    # 浏览器无头模式
    from selenium inport webdriver
    from selenium.webdriver import ChromeOptions
    option = ChromeOptions()
    option.add_argument('--headless')
    browser = webdriver.Chrome(executable_path='chromedriver.exe', options=option)
    browser.set_window_size(1366, 768)
    browser.get('https://www.baidu.com')
    browser.get_screenshot_as_file('a.png')


